#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.


# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/jjarsater/.config/skhd/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
#.blacklist [
#   "alacritty"
#]

#################################################################################
# Shortcuts for opening application or run scripts. All using the <leader> + num
# pad keys.
#
# 0x53 == 1
# 0x54 == 2
# 0x55 == 3
# 0x56 == 4
# 0x57 == 5
# 0x58 == 6
# 0x59 == 7
# 0x5B == 8
# 0x5C == 9
#
#################################################################################
lctrl + alt - 0x53 : /Applications/Alacritty.app/Contents/MacOS/alacritty --working-directory ~ -e tmux new
lctrl + alt - 0x59 : /Applications/Firefox.app/Contents/MacOS/firefox --new-tab "ext+container:name=Work&url=about:blank"
lctrl + alt - 0x5B : /Applications/Firefox.app/Contents/MacOS/firefox --new-tab "ext+container:name=Personal&url=about:blank"

# focus window
lctrl - h : yabai -m window --focus west
lctrl - j : yabai -m window --focus south
lctrl - k : yabai -m window --focus north
lctrl - l : yabai -m window --focus east
lctrl - 0x1E : yabai -m window --focus next # ]
lctrl - 0x21 : yabai -m window --focus prev # [

# swap window
lctrl + lalt - h : yabai -m window --swap west
lctrl + lalt - j : yabai -m window --swap south
lctrl + lalt - k : yabai -m window --swap north
lctrl + lalt - l : yabai -m window --swap east

# move window
lctrl + lalt + shift - h : yabai -m window --warp west
lctrl + lalt + shift - j : yabai -m window --warp south
lctrl + lalt + shift - k : yabai -m window --warp north
lctrl + lalt + shift - l : yabai -m window --warp east

# Rotate on X and Y axis
lctrl + lalt - x : yabai -m space --mirror x-axis
lctrl + lalt - y : yabai -m space --mirror y-axis

# Rotate window clockwise and counter clockwise
lctrl + lalt - 0x1E : yabai -m space --rotate 270 # [
lctrl + lalt - 0x21 : yabai -m space --rotate 90  # ]

# Equalize size of windows
lctrl + lalt - 0x31 : yabai -m space --balance # <space>

# Set insertion point for focused container
shift + lalt - h : yabai -m window --insert west
shift + lalt - j : yabai -m window --insert south
shift + lalt - k : yabai -m window --insert north
shift + lalt - l : yabai -m window --insert east
